rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /{document=**} {
      allow read, write: if false;
    }

    match /usernames/{username}{
      allow read;
      allow create: if isValidUsername(username);
    }

    match /users/{userId}{
      allow create: if canCreateNewProfile(userId);
      allow update: if isOwner() && dontSpoofUsername();
      allow read;
    }

    //Functions
    function isLoggedIn(){
      return request.auth.uid != null;
    }

    function isOwner(){
      let isOwner = request.auth.uid == resource.data.uid;
      return isOwner;
    }

    function canCreateNewProfile(userId){
      let validUid = request.resource.data.uid == request.auth.uid;
      let validDocLocation = request.auth.uid == userId;
      return isLoggedIn() && validUid && validDocLocation;
    }

    function isValidUsername(username) {
      let isOwner = request.auth.uid == request.resource.data.uid;
      let isValidLength = username.size() >= 5 && username.size() <=15;
      let isValidUserDoc = getAfter(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
      return isOwner && isValidLength && isValidUserDoc;
    }

  }  
}